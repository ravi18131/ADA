#include <stdio.h>

// Function to swap two elements

void swap(int* a, int* b) {

    int t = *a;

    *a = *b;

    *b = t;

}

// Function to partition the array and return the pivot index

int partition(int arr[], int low, int high) {

    int pivot = arr[high]; // Select the rightmost element as pivot

    int i = (low - 1); // Index of smaller element

    for (int j = low; j <= high - 1; j++) {

        // If the current element is smaller than or equal to the pivot

        if (arr[j] <= pivot) {

            i++; // Increment index of smaller element

            swap(&arr[i], &arr[j]);

        }

    }

    swap(&arr[i + 1], &arr[high]);

    return (i + 1); // Return the pivot index

}

// Function to implement Quick Sort

void quickSort(int arr[], int low, int high) {

    if (low < high) {

        // Find pivot index such that

        // elements smaller than the pivot are on the left

        // elements greater than the pivot are on the right

        int pivot = partition(arr, low, high);

        // Recursively sort elements before and after the pivot

        quickSort(arr, low, pivot - 1);

        quickSort(arr, pivot + 1, high);

    }

}

// Function to print an array

void printArray(int arr[], int size) {

    for (int i = 0; i < size; i++)

        printf("%d ", arr[i]);

    printf("\n");

}

// Test the algorithm

int main() {

    int arr[] = { 64, 25, 12, 22, 11 };

    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");

    printArray(arr, n);

    quickSort(arr, 0, n - 1);

    printf("Sorted array: ");

    printArray(arr, n);

    return 0;

}

